<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<!-- 编写sql语句的配置文件，对应mapper接口 -->
<mapper namespace="com.hxzy.mapper.UserMapper">
	<!-- 开启本mapper的namespace下的二级缓存。
		eviction:缓存收回策略
				LRU，默认。最近最少使用的:移除最长时间不被使用的对象。
				FIFO，先进先出:按对象进入缓存的顺序来移除它们。
				SOFT，软引用:移除基于垃圾回收器状态和软引用规则的对象。
				WEAK，弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。
		flushInterval(刷新间隔)：每隔一段时间，自动刷新缓存。可以被设置为任意的正整数,而且它们代表一个合理的毫秒 形式的时间段。默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。
	 	size(引用数目)：可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024
	 	readOnly(只读)：属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。
	 -->
	<cache eviction="LRU"
		flushInterval="60000"
		size="1024"
		readOnly="true"
	 />

	<resultMap type="user" id="findByIdResultMap">
		<!-- 指定数据库中唯一标示列 -->
		<id column="id" property="id"/>
		<result column="username" property="userName"/>
		<result column="birthday" property="birthday"/>
		<result column="sex" property="sex"/>
		<result column="address" property="address"/>
		
	</resultMap>
	
	<select flushCache="true" id="findById" parameterType="Integer" resultMap="findByIdResultMap">
		select * from `user` where `id` = #{id}
	</select>
	
	<insert id="add" parameterType="user">
		<!-- 插入成功后，将主键存放到user对象中的id属性 -->
		<selectKey keyProperty="id" order="AFTER" resultType="Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into `user` (`username`,`birthday`,`sex`,`address`) values (#{userName},#{birthday},#{sex},#{address})
	</insert>
</mapper>